<?xml version="1.0" encoding="UTF-8"?>
<routes id="DBManager" xmlns="http://camel.apache.org/schema/spring">
    <!-- insert -->
    <route id="Put to cache">
        <from uri="direct:putToCache"/>
        <log loggingLevel="INFO" message="Inserting to collection ${header.cid} ${header.DocumentCount} documents..."/>
        <marshal>
            <json id="json" library="Jackson"/>
        </marshal>
        <split parallelProcessing="true">
            <method ref="JSonArraySplitter"/>
            <to uri="direct:insertRecord"/>
        </split>
        <log loggingLevel="INFO" message="Done"/>
        <setBody>
            <simple>{"count": ${header.DocumentCount}}</simple>
        </setBody>
        <removeHeaders pattern="*"/>
    </route>
    <route id="_route1">
        <from uri="direct:insertRecord"/>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=save</simple>
        </recipientList>
        <log loggingLevel="INFO" message="Inserted to collection ${header.cid} document with id ${header.CamelMongoOid}."/>
    </route>
    <!-- delete -->
    <route id="Delete from cache">
        <from uri="direct:deleteFromCache"/>
        <log loggingLevel="INFO" message="Delete from collection ${header.cid} objects matching ${header.property} : ${header.value}"/>
        <setBody>
            <simple>{"${header.property}" : "${header.value}"}</simple>
        </setBody>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=remove</simple>
        </recipientList>
        <setBody>
            <simple>{"count": ${header.CamelMongoDbRecordsAffected}}</simple>
        </setBody>
        <removeHeaders pattern="*"/>
    </route>
    <!-- select -->
    <route id="Get from cache unlimited">
        <from uri="direct:getFromCacheUnlimited"/>
        <setHeader name="limit">
            <simple>{{batchLimit}}</simple>
        </setHeader>
        <to uri="direct:getFromCache"/>
    </route>
    <route id="Get from cache and save">
        <from uri="seda:getFromCache"/>
        <validate>
            <simple>${header.limit} range '1..{{batchLimit}}'</simple>
        </validate>
        <to uri="direct:getFromCache"/>
        <setHeader name="cid">
            <simple>cache</simple>
        </setHeader>
        <setBody>
            <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:UtilsBean.getTimestamp} }, "_id" : "${exchangeProperty.did}", "features" : ${body} }</simple>
        </setBody>
        <log message="Saving: ${body}"/>
        <to uri="direct:putToCache"/>
    </route>
    <route id="Get from cache">
        <from uri="direct:getFromCache"/>
        <validate>
            <simple>${header.limit} range '1..{{batchLimit}}'</simple>
        </validate>
        <log loggingLevel="INFO" message="Get all from cache ${header.cid} with limit ${header.limit} by user ${header.authorization}"/>
        <setHeader name="CamelMongoDbSortBy">
            <!--  descending by _id -->
            <constant>{"_id" : -1}</constant>
        </setHeader>
        <setHeader name="CamelMongoDbLimit">
            <simple>${header.limit}</simple>
        </setHeader>
        <setHeader name="CamelMongoDbBatchSize">
            <constant>{{batchLimit}}</constant>
        </setHeader>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        </recipientList>
        <to uri="direct:processOutput"/>
    </route>
    <route id="Get from cache sorted">
        <from uri="direct:getFromCacheSorted"/>
        <validate>
            <simple>${header.limit} range '1..{{batchLimit}}'</simple>
        </validate>
        <log loggingLevel="INFO" message="Get all from cache ${header.cid} with limit ${header.limit} sorted by ${header.sortBy}: ${header.sortOrder}  by user ${header.authorization}"/>
        <setHeader name="CamelMongoDbSortBy">
            <simple>{"${header.sortBy}" : ${header.sortOrder}}</simple>
        </setHeader>
        <setHeader name="CamelMongoDbLimit">
            <simple>${header.limit}</simple>
        </setHeader>
        <setHeader name="CamelMongoDbBatchSize">
            <constant>{{batchLimit}}</constant>
        </setHeader>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        </recipientList>
        <to uri="direct:processOutput"/>
    </route>
    <route id="Get from cache count">
        <from uri="direct:getFromCacheCount"/>
        <log loggingLevel="INFO" message="Get count from cache ${header.cid} by user ${header.authorization}"/>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=count</simple>
        </recipientList>
        <setBody>
            <simple>{"count": ${body}}</simple>
        </setBody>
        <removeHeaders pattern="*"/>
    </route>
    <route id="Get by query from cache unlimited">
        <from uri="direct:getByQueryFromCacheUnlimited"/>
        <setHeader name="limit">
            <simple>{{batchLimit}}</simple>
        </setHeader>
        <to uri="direct:getByQueryFromCache"/>
    </route>
    <route id="Get by query from cache">
        <from uri="direct:getByQueryFromCache"/>
        <validate>
            <simple>${header.limit} range '1..{{batchLimit}}'</simple>
        </validate>
        <log loggingLevel="INFO" message="Get from cache ${header.cid} object matching ${header.property} : ${header.value} with limit ${header.limit} by user ${header.authorization}"/>
        <setBody>
            <simple>{"${header.property}" : "${header.value}"}</simple>
        </setBody>
        <setHeader name="CamelMongoDbSortBy">
            <simple>{"_id" : -1}</simple>
        </setHeader>
        <setHeader name="CamelMongoDbLimit">
            <simple>${header.limit}</simple>
        </setHeader>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        </recipientList>
        <to uri="direct:processOutput"/>
    </route>
    <route id="Get one by property from cache">
        <from uri="direct:getByPropertyFromCache"/>
        <log loggingLevel="INFO" message="Get from cache ${header.cid} object matching ${header.property} : ${header.value} with limit ${header.limit} by user ${header.authorization}"/>
        <setBody>
            <simple>{"${header.property}" : "${header.value}"}</simple>
        </setBody>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findOneByQuery</simple>
        </recipientList>
        <to uri="direct:processOutput"/>
    </route>
    <route id="Get one by id from cache">
        <from uri="direct:getByIdFromCache"/>
        <log loggingLevel="INFO" message="Get from cache ${header.cid} object with id : ${header.value} by user ${header.authorization}"/>
        <setBody>
            <simple>"${header.value}"</simple>
        </setBody>
        <toD uri="mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findById"/>
        <removeHeaders pattern="*"/>
    </route>
    <route id="Get nearby from cache">
        <from uri="direct:getNearbyFromCache"/>
        <validate>
            <simple>${header.limit} range '1..{{nearbyLimit}}'</simple>
        </validate>
        <validate>
            <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
        </validate>
        <log loggingLevel="INFO" message="Get from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} meters with limit ${header.limit} by user ${header.authorization}"/>
        <!-- distance in meters -->
        <setBody>
            <simple>{ "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
        </setBody>
        <setHeader name="CamelMongoDbLimit">
            <simple>${header.limit}</simple>
        </setHeader>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        </recipientList>
        <to uri="direct:processOutput"/>
    </route>
    <route id="Get most stars nearby from cache">
        <from uri="direct:getStarsNearbyFromCache"/>
        <setHeader name="CamelMongoDbSortBy">
            <simple>{"properties.stars" : -1}</simple>
        </setHeader>
        <to uri="direct:getNearbyFromCache"/>
    </route>
    <route id="Get most stars nearby from cache and save">
        <from uri="seda:getStarsNearbyFromCache"/>
        <to uri="direct:getStarsNearbyFromCache"/>
        <setHeader name="cid">
            <simple>cache</simple>
        </setHeader>
        <setBody>
            <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:UtilsBean.getTimestamp} }, "_id" : "${exchangeProperty.did}", "features" : ${body} }</simple>
        </setBody>
        <to uri="direct:putToCache"/>
    </route>
    <route id="Get cheapest nearby from cache">
        <from uri="direct:getCheapestNearbyFromCache"/>
        <validate>
            <simple>${header.limit} range '1..{{nearbyLimit}}'</simple>
        </validate>
        <validate>
            <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
        </validate>
        <log loggingLevel="INFO" message="Get cheapest from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} with limit ${header.limit} by user ${header.authorization}"/>
        <setBody>
            <!-- distance in meters -->
            <simple>{ "properties.minrate" : { $gt : 0 },  "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } } }</simple>
        </setBody>
        <setHeader name="CamelMongoDbLimit">
            <simple>${header.limit}</simple>
        </setHeader>
        <setHeader name="CamelMongoDbSortBy">
            <simple>{"properties.minrate" : 1}</simple>
        </setHeader>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        </recipientList>
        <to uri="direct:processOutput"/>
    </route>
    <route id="Get cheapest nearby from cache and save">
        <from uri="seda:getCheapestNearbyFromCache"/>
        <to uri="direct:getCheapestNearbyFromCache"/>
        <setHeader name="cid">
            <simple>cache</simple>
        </setHeader>
        <setBody>
            <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:UtilsBean.getTimestamp} }, "_id" : "${exchangeProperty.did}", "features" : ${body} }</simple>
        </setBody>
        <to uri="direct:putToCache"/>
    </route>
    <route id="Get nearby from cache count">
        <from uri="direct:getNearbyFromCacheCount"/>
        <validate>
            <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
        </validate>
        <log loggingLevel="INFO" message="Get count from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} by user ${header.authorization}"/>
        <!-- divide distance in meters by equatorial radius in meters -->
        <process ref="MathProcessor"/>
        <setBody>
            <!-- distance in radians -->
            <simple>{ "geometry" : { $geoWithin: { $centerSphere: [ [ ${header.lng} , ${header.lat} ] , ${header.normalizedDistance} ] } } }</simple>
        </setBody>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=count</simple>
        </recipientList>
        <setBody>
            <simple>{"count": ${body}}</simple>
        </setBody>
        <removeHeaders pattern="*"/>
    </route>
    <route id="Get nearby from cache and save">
        <from uri="seda:getNearbyFromCache"/>
        <to uri="direct:getNearbyFromCache"/>
        <setHeader name="cid">
            <simple>cache</simple>
        </setHeader>
        <setBody>
            <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:UtilsBean.getTimestamp} }, "_id" : "${exchangeProperty.did}", "features" : ${body} }</simple>
        </setBody>
        <to uri="direct:putToCache"/>
    </route>
    <route id="Process output">
        <from uri="direct:processOutput"/>
        <marshal>
            <json id="json" library="Jackson"/>
        </marshal>
        <!--process ref="MongodbJSonProcessor"/-->
        <removeHeaders pattern="*"/>
    </route>
    <route id="Log error">
        <from uri="direct:logError"/>
        <log logName="net.gmsworld.server.camel" loggingLevel="ERROR" message="Operation failed with exception: ${exception.stacktrace}"/>
        <setBody>
            <simple>{"error" : "Operation failed"}</simple>
        </setBody>
        <removeHeaders pattern="*"/>
        <setHeader name="CamelHttpResponseCode">
            <constant>500</constant>
        </setHeader>
    </route>
</routes>
